import os
import sys
import pickle

import numpy as np
import matplotlib.pyplot as plt

# bmtk
from bmtk.analyzer.spike_trains import plot_raster, load_spikes_file
from bmtk.analyzer.cell_vars import plot_report, load_reports

from tms_networks.parameters import *


def plot():
    '''
    Plot membrane potential of L5 neuron's axon, for a single simulation.
    '''
    
    config_file = BMTK_DIR + '/simulation_config.json'
    
    plot_raster(config_file=config_file)
    spike_trains = load_spikes_file(config_file=config_file, spikes_file=None)
    st = spike_trains
    l5id = l5_cell_node_id = st.nodes()[-1][1]
    
    plot_report(config_file=config_file,
                node_ids=[l5_cell_node_id])
    
    N_steps = int(sim_tstop/sim_dt)

    with open(ROOT_DIR+'/vmem_results/L5_vmem_axon.dat', 'rb') as vm_axon_file:
        vm_axon = pickle.load(vm_axon_file)
        plt.plot(vm_axon)
        plt.title('L5_vmem_axon')
        plt.show()


def plot_L5_vm_crop(tstep_stim = 75):
    '''
    tstep_stim : number of time step of TMS stimulus within the crop.
    '''
    
    L5_vm = pickle.load(open('L5_vmem_axon.dat', 'rb'))
    
    # a bit before the pulse (which happens on t=55.0) and 20.0 ms
    # after the pulse.
    # dt = 0.025
    L5_vm_crop = L5_vm[2125:3000]
    
    plt.title('L5 vm crop')
    plt.axvline(x=tstep_stim, c='r')
    plt.plot(L5_vm_crop)
    plt.show()

def load_l5_vm_files(tms_networks_folder=None,
                     vm_file_name='L5_vmem_axon.dat',
                     plot_each_simulation=False):
    '''
    tms_networks_folder: folder with the collection of results of
        tms networks simulations.
    '''

    original_folder = os.getcwd()

    if tms_networks_folder is None:
        tms_networks_folder = raw_input(
            'Insert path to folder with results of TMS networks: ')

    assert(len(tms_networks_folder)>0)
    assert(os.path.isdir(tms_networks_folder))
    
    tms_networks_folder = os.path.abspath(tms_networks_folder)
    print('received folder: ', tms_networks_folder)
    
    num_simulations = len(os.listdir(tms_networks_folder))
    print('detected ', num_simulations, ' simulations. ')
    
    results = []
    
    for folder in os.listdir(tms_networks_folder):
        print('\n entering folder: ', folder)
        os.chdir(tms_networks_folder+'/'+folder)

        try:
            with open(vm_file_name, 'rb') as vm_file:
                l5_vm = pickle.load(vm_file)
                print('loaded file: ', vm_file_name)
        except:
            print('could not find ' + vm_file_name + ' file in: ', folder)
            continue
        
##        l5_vm = l5_vm[start_tstep:end_tstep]
        results.append(l5_vm)
        
        if plot_each_simulation:
            plt.title("L5 vm for folder: {}".format(folder))
            plt.plot(l5_vm)
            plt.show()

    os.chdir(original_folder)
    
    return np.array(results)

# code from Rusu et al. 2014; Schaworonkow et al. 2018
def convolve_l5_mem(sim_time, l5_membrane):
    """ Convolve L5 membrane potential with Gaussian kernel.
        Code from Rusu et al. 2014 and Schaworonkow et al. 2018. """
    
    kernel_std = 30.0
    norm_const = 1/np.sqrt(2*np.pi*kernel_std)
    x_range = np.arange(-kernel_std, kernel_std, 1)
    kernel = norm_const*np.exp(-pow(x_range, 2)/(2*kernel_std))
    
    response = np.convolve(l5_membrane, kernel, 'valid')
    cut_time = sim_time[int(kernel_std):\
                        int(sim_time.shape[0])-int(kernel_std)+1]
    
    return response, cut_time

# code from Rusu et al. 2014; Schaworonkow et al. 2018
# (edited)
def plot_epidural_response(results, timesteps):

    L5_mem = np.array([L5_vm for L5_vm in results])
    response = np.mean(L5_mem, axis=0)
    response, sim_time = convolve_l5_mem(timesteps, response)

    # save model output to a file
    response_fn = ROOT_DIR + '/pool/response.dat'
    sim_time_fn = ROOT_DIR + '/pool/sim_time.dat'
    with open(response_fn, 'w+') as f:
        pickle.dump(response, f)
    with open(sim_time_fn, 'w+') as f:
        pickle.dump(sim_time, f)

    # plot model output
    plt.figure()
    plt.plot(sim_time, response)
    plt.xlim(timesteps[0], timesteps[-1]+sim_dt)
    plt.title('Simulated epidural response')
    plt.xlabel('Time (ms)')
    plt.ylabel('Model output [a.u.]')
    plt.show()

# --------------------------------------------------------------------------

def show_schaworonkow_raster(fn):
    '''
    load .npy file generated by 'tms_model' code:
    Natalie Schaworonkow, Jochen Triesch_: Ongoing brain rhythms shape I-wave
    properties in a computational model. Brain Stimulation, 2018. 3
    https://doi.org/10.1016/j.brs.2018.03.010
    '''

    # examples of how to load and read the data:
    # data.tolist().keys()
    # data.tolist()['params']
    # plt.plot(data.tolist()['results'][0]['L5_mem'])

    data = np.load(fn, allow_pickle=True)

    N = len(data.tolist()['results'])

    for i in range(N):
        print i, ':', data.tolist()['results'][i]['L5_spikes']

    for i in range(N): 
        spikes_t = data.tolist()['results'][i]['L5_spikes'] 
        plt.scatter(x=spikes_t, y=np.array([i]*len(spikes_t)))
    plt.show()

# ---------------------------------------------------------------------------

if __name__ == '__main__':
    if sys.argv[-1] == 'pool':
        results = load_l5_vm_files(POOL_DIR)
        
        # check disadjustment
        start_tstep = 0
        end_tstep = len(results[0])
        timesteps = (np.arange(start_tstep, end_tstep, 1)*sim_dt)
        plot_epidural_response(results, timesteps)
    else:
        plot()
        plot_L5_vm_crop()
